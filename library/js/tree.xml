<?xml version="1.0"?>

<bindings id="treeBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="mytree" extends="chrome://global/content/bindings/tree.xml#tree">
    <content>
      <children includes="treecols"/>
      <xul:stack flex="1">
        <xul:treerows class="tree-rows" flex="1">
          <children/>
        </xul:treerows>
      </xul:stack>
    </content>
    <implementation>
      <field name="itemid">5</field>
      <field name="rowid">5</field>
      <field name="treechildrenid">0</field>
      <field name="cnt">0</field>

      <method name="RenameCurrent">
        <parameter name="treename"/>
        <parameter name="cellname"/>
        <body>
        <![CDATA[
         var tree = document.getElementById(treename);
         var currentitem = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
         var currentlabel = tree.treeBoxObject.view.getCellText(tree.currentIndex,cellname);
         var newlabel = prompt("Please enter the new node-name",currentlabel);

         if (newlabel!=false) {
            var currentcell = document.getElementById("cell-of-" + 
                          currentitem.getAttribute("id"));
            currentcell.setAttribute("label",newlabel);
         }
         this.BuildPopups();
        ]]>
        </body>
      </method>

      <method name="DeleteCurrent">
        <parameter name="treename"/>
        <body>
        <![CDATA[
         if (confirm("Are you sure you want to delete this node?") == true) {
            var tree = document.getElementById(treename);
            var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
            currentelement.parentNode.removeChild(currentelement);
         }
        ]]>
        </body>
      </method>

      <method name="CreateSubTree">
        <parameter name="treeid"/>
        <parameter name="content"/>
        <body>
        <![CDATA[
         var tree = document.getElementById(treeid);
         var currentitem = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
         var currentid = tree.treeBoxObject.view.getItemAtIndex(
                   tree.currentIndex).getAttribute("id");
         if (currentid != "") {
            content = prompt('Please enter a node-name','undefined');
            var parentid = tree.treeBoxObject.view.getItemAtIndex(
                       tree.currentIndex).parentNode.getAttribute("id");
            var parent = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex).parentNode;

            // create Treerow with id (rowid is a global variable so that
            // we do not use the same id twice)
            var tr = document.createElement("treerow");
            tr.setAttribute("id", "treerow" + this.rowid);
            var tc = document.createElement("treecell");
            tc.setAttribute("label", content);
            tc.setAttribute("id","cell-of-treeitem" + this.itemid);
            tr.appendChild(tc);
            this.rowid++;

            // create treeitem with id (itemid is a global variable so 
            // that we do not use the same id twice)
            var ti = document.createElement("treeitem");
            ti.setAttribute("id", "treeitem" + this.itemid);
            ti.appendChild(tr);
            this.itemid++;

            // we distinguish the case that
            // the container of the item is empty --> create new treechildren
            // object and append item a treechildren-object already exists --> 
            // get the id and append new item to this one
            if (currentitem.getAttribute("container") != "true") {
               currentitem.setAttribute("container", "true");
               var tch = document.createElement("treechildren");
               tch.setAttribute("id", "treechildren" + this.treechildrenid);
               tch.appendChild(ti);
               this.treechildrenid++;
               currentitem.appendChild(tch);
            } else {
               var existingtreechildren = 
                   document.getElementById(currentitem.childNodes.item(0).getAttribute("id"));
               existingtreechildren.appendChild(ti);
            }
            // set open status of the item
            currentitem.setAttribute("open", "true");
         }
        ]]>
        </body>
      </method>

      <method name="topcategory">
        <parameter name="childrenobject"/>
        <parameter name="content"/>
        <body>
        <![CDATA[
         thetree = document.getElementById(childrenobject);
         var tr = document.createElement("treerow");
         tr.setAttribute("id", "treerow" + this.rowid);
         this.rowid++;
         var tc = document.createElement("treecell");
         tc.setAttribute("label", content);
         tc.setAttribute("id","cell-of-treeitem" + this.itemid);
         tr.appendChild(tc);
         this.rowid++;
         var ti = document.createElement("treeitem");
         ti.setAttribute("id", "treeitem" + this.itemid);
         ti.appendChild(tr);
         this.itemid++;
         thetree.appendChild(ti);
        ]]>
        </body>
      </method>

      <method name="getCellNodeAt">
        <parameter name="row"/>
        <parameter name="col"/>
        <body>
          var view;
          try {
            view = this.contentView;
          } catch (ex){}
          if (view){
            var elem = view.getItemAtIndex(row);
            if (elem){
              var pos = ((document.getElementById(col).ordinal - 1) >> 1);
              return elem.firstChild.childNodes[pos];
            }
          }
          return null;
        </body>
      </method>
      
    </implementation>
    <handlers>
      <handler event="click" button="0">
        var treeBox = this.treeBoxObject;
        var row = {};
        var col = {};
        var obj = {};
        treeBox.getCellAt(event.clientX,event.clientY,row,col,obj);
         var cellnode = this.getCellNodeAt(row.value,col.value);
         alert(cellnode.id);
      </handler>
    </handlers>
  </binding>
</bindings>